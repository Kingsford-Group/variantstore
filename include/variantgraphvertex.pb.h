// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/variantgraphvertex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_include_2fvariantgraphvertex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_include_2fvariantgraphvertex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_include_2fvariantgraphvertex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_include_2fvariantgraphvertex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_include_2fvariantgraphvertex_2eproto();
namespace variantdb {
class VariantGraphVertex;
class VariantGraphVertexDefaultTypeInternal;
extern VariantGraphVertexDefaultTypeInternal _VariantGraphVertex_default_instance_;
class VariantGraphVertexList;
class VariantGraphVertexListDefaultTypeInternal;
extern VariantGraphVertexListDefaultTypeInternal _VariantGraphVertexList_default_instance_;
class VariantGraphVertex_sample_info;
class VariantGraphVertex_sample_infoDefaultTypeInternal;
extern VariantGraphVertex_sample_infoDefaultTypeInternal _VariantGraphVertex_sample_info_default_instance_;
}  // namespace variantdb
PROTOBUF_NAMESPACE_OPEN
template<> ::variantdb::VariantGraphVertex* Arena::CreateMaybeMessage<::variantdb::VariantGraphVertex>(Arena*);
template<> ::variantdb::VariantGraphVertexList* Arena::CreateMaybeMessage<::variantdb::VariantGraphVertexList>(Arena*);
template<> ::variantdb::VariantGraphVertex_sample_info* Arena::CreateMaybeMessage<::variantdb::VariantGraphVertex_sample_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace variantdb {

// ===================================================================

class VariantGraphVertex_sample_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:variantdb.VariantGraphVertex.sample_info) */ {
 public:
  VariantGraphVertex_sample_info();
  virtual ~VariantGraphVertex_sample_info();

  VariantGraphVertex_sample_info(const VariantGraphVertex_sample_info& from);
  VariantGraphVertex_sample_info(VariantGraphVertex_sample_info&& from) noexcept
    : VariantGraphVertex_sample_info() {
    *this = ::std::move(from);
  }

  inline VariantGraphVertex_sample_info& operator=(const VariantGraphVertex_sample_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantGraphVertex_sample_info& operator=(VariantGraphVertex_sample_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VariantGraphVertex_sample_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantGraphVertex_sample_info* internal_default_instance() {
    return reinterpret_cast<const VariantGraphVertex_sample_info*>(
               &_VariantGraphVertex_sample_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VariantGraphVertex_sample_info* other);
  friend void swap(VariantGraphVertex_sample_info& a, VariantGraphVertex_sample_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariantGraphVertex_sample_info* New() const final {
    return CreateMaybeMessage<VariantGraphVertex_sample_info>(nullptr);
  }

  VariantGraphVertex_sample_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantGraphVertex_sample_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantGraphVertex_sample_info& from);
  void MergeFrom(const VariantGraphVertex_sample_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantGraphVertex_sample_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variantdb.VariantGraphVertex.sample_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sample_id = 2;
  void clear_sample_id();
  static const int kSampleIdFieldNumber = 2;
  const std::string& sample_id() const;
  void set_sample_id(const std::string& value);
  void set_sample_id(std::string&& value);
  void set_sample_id(const char* value);
  void set_sample_id(const char* value, size_t size);
  std::string* mutable_sample_id();
  std::string* release_sample_id();
  void set_allocated_sample_id(std::string* sample_id);

  // double index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  double index() const;
  void set_index(double value);

  // bool gt_1 = 3;
  void clear_gt_1();
  static const int kGt1FieldNumber = 3;
  bool gt_1() const;
  void set_gt_1(bool value);

  // bool gt_2 = 4;
  void clear_gt_2();
  static const int kGt2FieldNumber = 4;
  bool gt_2() const;
  void set_gt_2(bool value);

  // @@protoc_insertion_point(class_scope:variantdb.VariantGraphVertex.sample_info)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_id_;
  double index_;
  bool gt_1_;
  bool gt_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_include_2fvariantgraphvertex_2eproto;
};
// -------------------------------------------------------------------

class VariantGraphVertex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:variantdb.VariantGraphVertex) */ {
 public:
  VariantGraphVertex();
  virtual ~VariantGraphVertex();

  VariantGraphVertex(const VariantGraphVertex& from);
  VariantGraphVertex(VariantGraphVertex&& from) noexcept
    : VariantGraphVertex() {
    *this = ::std::move(from);
  }

  inline VariantGraphVertex& operator=(const VariantGraphVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantGraphVertex& operator=(VariantGraphVertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VariantGraphVertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantGraphVertex* internal_default_instance() {
    return reinterpret_cast<const VariantGraphVertex*>(
               &_VariantGraphVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VariantGraphVertex* other);
  friend void swap(VariantGraphVertex& a, VariantGraphVertex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariantGraphVertex* New() const final {
    return CreateMaybeMessage<VariantGraphVertex>(nullptr);
  }

  VariantGraphVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantGraphVertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantGraphVertex& from);
  void MergeFrom(const VariantGraphVertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantGraphVertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variantdb.VariantGraphVertex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VariantGraphVertex_sample_info sample_info;

  // accessors -------------------------------------------------------

  // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
  int s_info_size() const;
  void clear_s_info();
  static const int kSInfoFieldNumber = 4;
  ::variantdb::VariantGraphVertex_sample_info* mutable_s_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex_sample_info >*
      mutable_s_info();
  const ::variantdb::VariantGraphVertex_sample_info& s_info(int index) const;
  ::variantdb::VariantGraphVertex_sample_info* add_s_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex_sample_info >&
      s_info() const;

  // double vertex_id = 1;
  void clear_vertex_id();
  static const int kVertexIdFieldNumber = 1;
  double vertex_id() const;
  void set_vertex_id(double value);

  // double offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  double offset() const;
  void set_offset(double value);

  // int32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:variantdb.VariantGraphVertex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex_sample_info > s_info_;
  double vertex_id_;
  double offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_include_2fvariantgraphvertex_2eproto;
};
// -------------------------------------------------------------------

class VariantGraphVertexList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:variantdb.VariantGraphVertexList) */ {
 public:
  VariantGraphVertexList();
  virtual ~VariantGraphVertexList();

  VariantGraphVertexList(const VariantGraphVertexList& from);
  VariantGraphVertexList(VariantGraphVertexList&& from) noexcept
    : VariantGraphVertexList() {
    *this = ::std::move(from);
  }

  inline VariantGraphVertexList& operator=(const VariantGraphVertexList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantGraphVertexList& operator=(VariantGraphVertexList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VariantGraphVertexList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantGraphVertexList* internal_default_instance() {
    return reinterpret_cast<const VariantGraphVertexList*>(
               &_VariantGraphVertexList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VariantGraphVertexList* other);
  friend void swap(VariantGraphVertexList& a, VariantGraphVertexList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariantGraphVertexList* New() const final {
    return CreateMaybeMessage<VariantGraphVertexList>(nullptr);
  }

  VariantGraphVertexList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantGraphVertexList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantGraphVertexList& from);
  void MergeFrom(const VariantGraphVertexList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantGraphVertexList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "variantdb.VariantGraphVertexList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .variantdb.VariantGraphVertex vertex = 1;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 1;
  ::variantdb::VariantGraphVertex* mutable_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex >*
      mutable_vertex();
  const ::variantdb::VariantGraphVertex& vertex(int index) const;
  ::variantdb::VariantGraphVertex* add_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex >&
      vertex() const;

  // @@protoc_insertion_point(class_scope:variantdb.VariantGraphVertexList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex > vertex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_include_2fvariantgraphvertex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VariantGraphVertex_sample_info

// double index = 1;
inline void VariantGraphVertex_sample_info::clear_index() {
  index_ = 0;
}
inline double VariantGraphVertex_sample_info::index() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.sample_info.index)
  return index_;
}
inline void VariantGraphVertex_sample_info::set_index(double value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.sample_info.index)
}

// string sample_id = 2;
inline void VariantGraphVertex_sample_info::clear_sample_id() {
  sample_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantGraphVertex_sample_info::sample_id() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.sample_info.sample_id)
  return sample_id_.GetNoArena();
}
inline void VariantGraphVertex_sample_info::set_sample_id(const std::string& value) {
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.sample_info.sample_id)
}
inline void VariantGraphVertex_sample_info::set_sample_id(std::string&& value) {
  
  sample_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:variantdb.VariantGraphVertex.sample_info.sample_id)
}
inline void VariantGraphVertex_sample_info::set_sample_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:variantdb.VariantGraphVertex.sample_info.sample_id)
}
inline void VariantGraphVertex_sample_info::set_sample_id(const char* value, size_t size) {
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:variantdb.VariantGraphVertex.sample_info.sample_id)
}
inline std::string* VariantGraphVertex_sample_info::mutable_sample_id() {
  
  // @@protoc_insertion_point(field_mutable:variantdb.VariantGraphVertex.sample_info.sample_id)
  return sample_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantGraphVertex_sample_info::release_sample_id() {
  // @@protoc_insertion_point(field_release:variantdb.VariantGraphVertex.sample_info.sample_id)
  
  return sample_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantGraphVertex_sample_info::set_allocated_sample_id(std::string* sample_id) {
  if (sample_id != nullptr) {
    
  } else {
    
  }
  sample_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_id);
  // @@protoc_insertion_point(field_set_allocated:variantdb.VariantGraphVertex.sample_info.sample_id)
}

// bool gt_1 = 3;
inline void VariantGraphVertex_sample_info::clear_gt_1() {
  gt_1_ = false;
}
inline bool VariantGraphVertex_sample_info::gt_1() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.sample_info.gt_1)
  return gt_1_;
}
inline void VariantGraphVertex_sample_info::set_gt_1(bool value) {
  
  gt_1_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.sample_info.gt_1)
}

// bool gt_2 = 4;
inline void VariantGraphVertex_sample_info::clear_gt_2() {
  gt_2_ = false;
}
inline bool VariantGraphVertex_sample_info::gt_2() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.sample_info.gt_2)
  return gt_2_;
}
inline void VariantGraphVertex_sample_info::set_gt_2(bool value) {
  
  gt_2_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.sample_info.gt_2)
}

// -------------------------------------------------------------------

// VariantGraphVertex

// double vertex_id = 1;
inline void VariantGraphVertex::clear_vertex_id() {
  vertex_id_ = 0;
}
inline double VariantGraphVertex::vertex_id() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.vertex_id)
  return vertex_id_;
}
inline void VariantGraphVertex::set_vertex_id(double value) {
  
  vertex_id_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.vertex_id)
}

// double offset = 2;
inline void VariantGraphVertex::clear_offset() {
  offset_ = 0;
}
inline double VariantGraphVertex::offset() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.offset)
  return offset_;
}
inline void VariantGraphVertex::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.offset)
}

// int32 length = 3;
inline void VariantGraphVertex::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantGraphVertex::length() const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.length)
  return length_;
}
inline void VariantGraphVertex::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:variantdb.VariantGraphVertex.length)
}

// repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
inline int VariantGraphVertex::s_info_size() const {
  return s_info_.size();
}
inline void VariantGraphVertex::clear_s_info() {
  s_info_.Clear();
}
inline ::variantdb::VariantGraphVertex_sample_info* VariantGraphVertex::mutable_s_info(int index) {
  // @@protoc_insertion_point(field_mutable:variantdb.VariantGraphVertex.s_info)
  return s_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex_sample_info >*
VariantGraphVertex::mutable_s_info() {
  // @@protoc_insertion_point(field_mutable_list:variantdb.VariantGraphVertex.s_info)
  return &s_info_;
}
inline const ::variantdb::VariantGraphVertex_sample_info& VariantGraphVertex::s_info(int index) const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertex.s_info)
  return s_info_.Get(index);
}
inline ::variantdb::VariantGraphVertex_sample_info* VariantGraphVertex::add_s_info() {
  // @@protoc_insertion_point(field_add:variantdb.VariantGraphVertex.s_info)
  return s_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex_sample_info >&
VariantGraphVertex::s_info() const {
  // @@protoc_insertion_point(field_list:variantdb.VariantGraphVertex.s_info)
  return s_info_;
}

// -------------------------------------------------------------------

// VariantGraphVertexList

// repeated .variantdb.VariantGraphVertex vertex = 1;
inline int VariantGraphVertexList::vertex_size() const {
  return vertex_.size();
}
inline void VariantGraphVertexList::clear_vertex() {
  vertex_.Clear();
}
inline ::variantdb::VariantGraphVertex* VariantGraphVertexList::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:variantdb.VariantGraphVertexList.vertex)
  return vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex >*
VariantGraphVertexList::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:variantdb.VariantGraphVertexList.vertex)
  return &vertex_;
}
inline const ::variantdb::VariantGraphVertex& VariantGraphVertexList::vertex(int index) const {
  // @@protoc_insertion_point(field_get:variantdb.VariantGraphVertexList.vertex)
  return vertex_.Get(index);
}
inline ::variantdb::VariantGraphVertex* VariantGraphVertexList::add_vertex() {
  // @@protoc_insertion_point(field_add:variantdb.VariantGraphVertexList.vertex)
  return vertex_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::variantdb::VariantGraphVertex >&
VariantGraphVertexList::vertex() const {
  // @@protoc_insertion_point(field_list:variantdb.VariantGraphVertexList.vertex)
  return vertex_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace variantdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_include_2fvariantgraphvertex_2eproto
