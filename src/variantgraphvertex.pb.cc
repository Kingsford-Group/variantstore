// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/variantgraphvertex.proto

#include "include/variantgraphvertex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_include_2fvariantgraphvertex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_include_2fvariantgraphvertex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto;
namespace variantdb {
class VariantGraphVertex_sample_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantGraphVertex_sample_info> _instance;
} _VariantGraphVertex_sample_info_default_instance_;
class VariantGraphVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantGraphVertex> _instance;
} _VariantGraphVertex_default_instance_;
class VariantGraphVertexListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantGraphVertexList> _instance;
} _VariantGraphVertexList_default_instance_;
}  // namespace variantdb
static void InitDefaultsVariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::variantdb::_VariantGraphVertex_sample_info_default_instance_;
    new (ptr) ::variantdb::VariantGraphVertex_sample_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::variantdb::VariantGraphVertex_sample_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto}, {}};

static void InitDefaultsVariantGraphVertex_include_2fvariantgraphvertex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::variantdb::_VariantGraphVertex_default_instance_;
    new (ptr) ::variantdb::VariantGraphVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::variantdb::VariantGraphVertex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVariantGraphVertex_include_2fvariantgraphvertex_2eproto}, {
      &scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto.base,}};

static void InitDefaultsVariantGraphVertexList_include_2fvariantgraphvertex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::variantdb::_VariantGraphVertexList_default_instance_;
    new (ptr) ::variantdb::VariantGraphVertexList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::variantdb::VariantGraphVertexList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariantGraphVertexList_include_2fvariantgraphvertex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVariantGraphVertexList_include_2fvariantgraphvertex_2eproto}, {
      &scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_include_2fvariantgraphvertex_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_include_2fvariantgraphvertex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_include_2fvariantgraphvertex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_include_2fvariantgraphvertex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex_sample_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex_sample_info, index_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex_sample_info, sample_id_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex_sample_info, gt_1_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex_sample_info, gt_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex, vertex_id_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex, offset_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex, length_),
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertex, s_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::variantdb::VariantGraphVertexList, vertex_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::variantdb::VariantGraphVertex_sample_info)},
  { 9, -1, sizeof(::variantdb::VariantGraphVertex)},
  { 18, -1, sizeof(::variantdb::VariantGraphVertexList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::variantdb::_VariantGraphVertex_sample_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::variantdb::_VariantGraphVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::variantdb::_VariantGraphVertexList_default_instance_),
};

const char descriptor_table_protodef_include_2fvariantgraphvertex_2eproto[] =
  "\n include/variantgraphvertex.proto\022\tvari"
  "antdb\"\317\001\n\022VariantGraphVertex\022\021\n\tvertex_i"
  "d\030\001 \001(\r\022\016\n\006offset\030\002 \001(\004\022\016\n\006length\030\003 \001(\r\022"
  "9\n\006s_info\030\004 \003(\0132).variantdb.VariantGraph"
  "Vertex.sample_info\032K\n\013sample_info\022\r\n\005ind"
  "ex\030\001 \001(\001\022\021\n\tsample_id\030\002 \001(\t\022\014\n\004gt_1\030\003 \001("
  "\010\022\014\n\004gt_2\030\004 \001(\010\"G\n\026VariantGraphVertexLis"
  "t\022-\n\006vertex\030\001 \003(\0132\035.variantdb.VariantGra"
  "phVertexb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_include_2fvariantgraphvertex_2eproto_once;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_include_2fvariantgraphvertex_2eproto = {
  false, descriptor_table_protodef_include_2fvariantgraphvertex_2eproto, "include/variantgraphvertex.proto", 336,
  &descriptor_table_include_2fvariantgraphvertex_2eproto_once, AddDescriptors_include_2fvariantgraphvertex_2eproto, schemas,
  file_default_instances, TableStruct_include_2fvariantgraphvertex_2eproto::offsets,
  file_level_metadata_include_2fvariantgraphvertex_2eproto, 3, file_level_enum_descriptors_include_2fvariantgraphvertex_2eproto, file_level_service_descriptors_include_2fvariantgraphvertex_2eproto,
};

void AddDescriptors_include_2fvariantgraphvertex_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariantGraphVertexList_include_2fvariantgraphvertex_2eproto.base);
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_include_2fvariantgraphvertex_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_include_2fvariantgraphvertex_2eproto = []() { AddDescriptors_include_2fvariantgraphvertex_2eproto(); return true; }();
namespace variantdb {

// ===================================================================

void VariantGraphVertex_sample_info::InitAsDefaultInstance() {
}
class VariantGraphVertex_sample_info::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantGraphVertex_sample_info::kIndexFieldNumber;
const int VariantGraphVertex_sample_info::kSampleIdFieldNumber;
const int VariantGraphVertex_sample_info::kGt1FieldNumber;
const int VariantGraphVertex_sample_info::kGt2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantGraphVertex_sample_info::VariantGraphVertex_sample_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:variantdb.VariantGraphVertex.sample_info)
}
VariantGraphVertex_sample_info::VariantGraphVertex_sample_info(const VariantGraphVertex_sample_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sample_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sample_id().size() > 0) {
    sample_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_id_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&gt_2_) -
    reinterpret_cast<char*>(&index_)) + sizeof(gt_2_));
  // @@protoc_insertion_point(copy_constructor:variantdb.VariantGraphVertex.sample_info)
}

void VariantGraphVertex_sample_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto.base);
  sample_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gt_2_) -
      reinterpret_cast<char*>(&index_)) + sizeof(gt_2_));
}

VariantGraphVertex_sample_info::~VariantGraphVertex_sample_info() {
  // @@protoc_insertion_point(destructor:variantdb.VariantGraphVertex.sample_info)
  SharedDtor();
}

void VariantGraphVertex_sample_info::SharedDtor() {
  sample_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariantGraphVertex_sample_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantGraphVertex_sample_info& VariantGraphVertex_sample_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantGraphVertex_sample_info_include_2fvariantgraphvertex_2eproto.base);
  return *internal_default_instance();
}


void VariantGraphVertex_sample_info::Clear() {
// @@protoc_insertion_point(message_clear_start:variantdb.VariantGraphVertex.sample_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gt_2_) -
      reinterpret_cast<char*>(&index_)) + sizeof(gt_2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariantGraphVertex_sample_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double index = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 9) goto handle_unusual;
        index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
        ptr += sizeof(double);
        break;
      }
      // string sample_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sample_id(), ptr, ctx, "variantdb.VariantGraphVertex.sample_info.sample_id");
        CHK_(ptr);
        break;
      }
      // bool gt_1 = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        gt_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // bool gt_2 = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        gt_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariantGraphVertex_sample_info::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:variantdb.VariantGraphVertex.sample_info)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sample_id().data(), static_cast<int>(this->sample_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "variantdb.VariantGraphVertex.sample_info.sample_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gt_1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gt_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gt_2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gt_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:variantdb.VariantGraphVertex.sample_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:variantdb.VariantGraphVertex.sample_info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariantGraphVertex_sample_info::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:variantdb.VariantGraphVertex.sample_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double index = 1;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->index(), output);
  }

  // string sample_id = 2;
  if (this->sample_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "variantdb.VariantGraphVertex.sample_info.sample_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sample_id(), output);
  }

  // bool gt_1 = 3;
  if (this->gt_1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->gt_1(), output);
  }

  // bool gt_2 = 4;
  if (this->gt_2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->gt_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:variantdb.VariantGraphVertex.sample_info)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantGraphVertex_sample_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:variantdb.VariantGraphVertex.sample_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double index = 1;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->index(), target);
  }

  // string sample_id = 2;
  if (this->sample_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "variantdb.VariantGraphVertex.sample_info.sample_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->sample_id(), target);
  }

  // bool gt_1 = 3;
  if (this->gt_1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->gt_1(), target);
  }

  // bool gt_2 = 4;
  if (this->gt_2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->gt_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:variantdb.VariantGraphVertex.sample_info)
  return target;
}

size_t VariantGraphVertex_sample_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:variantdb.VariantGraphVertex.sample_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sample_id = 2;
  if (this->sample_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sample_id());
  }

  // double index = 1;
  if (this->index() != 0) {
    total_size += 1 + 8;
  }

  // bool gt_1 = 3;
  if (this->gt_1() != 0) {
    total_size += 1 + 1;
  }

  // bool gt_2 = 4;
  if (this->gt_2() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantGraphVertex_sample_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:variantdb.VariantGraphVertex.sample_info)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantGraphVertex_sample_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantGraphVertex_sample_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:variantdb.VariantGraphVertex.sample_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:variantdb.VariantGraphVertex.sample_info)
    MergeFrom(*source);
  }
}

void VariantGraphVertex_sample_info::MergeFrom(const VariantGraphVertex_sample_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:variantdb.VariantGraphVertex.sample_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sample_id().size() > 0) {

    sample_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_id_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.gt_1() != 0) {
    set_gt_1(from.gt_1());
  }
  if (from.gt_2() != 0) {
    set_gt_2(from.gt_2());
  }
}

void VariantGraphVertex_sample_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:variantdb.VariantGraphVertex.sample_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantGraphVertex_sample_info::CopyFrom(const VariantGraphVertex_sample_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:variantdb.VariantGraphVertex.sample_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantGraphVertex_sample_info::IsInitialized() const {
  return true;
}

void VariantGraphVertex_sample_info::Swap(VariantGraphVertex_sample_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariantGraphVertex_sample_info::InternalSwap(VariantGraphVertex_sample_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sample_id_.Swap(&other->sample_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(gt_1_, other->gt_1_);
  swap(gt_2_, other->gt_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantGraphVertex_sample_info::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_include_2fvariantgraphvertex_2eproto);
  return ::file_level_metadata_include_2fvariantgraphvertex_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VariantGraphVertex::InitAsDefaultInstance() {
}
class VariantGraphVertex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantGraphVertex::kVertexIdFieldNumber;
const int VariantGraphVertex::kOffsetFieldNumber;
const int VariantGraphVertex::kLengthFieldNumber;
const int VariantGraphVertex::kSInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantGraphVertex::VariantGraphVertex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:variantdb.VariantGraphVertex)
}
VariantGraphVertex::VariantGraphVertex(const VariantGraphVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      s_info_(from.s_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:variantdb.VariantGraphVertex)
}

void VariantGraphVertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto.base);
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

VariantGraphVertex::~VariantGraphVertex() {
  // @@protoc_insertion_point(destructor:variantdb.VariantGraphVertex)
  SharedDtor();
}

void VariantGraphVertex::SharedDtor() {
}

void VariantGraphVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantGraphVertex& VariantGraphVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantGraphVertex_include_2fvariantgraphvertex_2eproto.base);
  return *internal_default_instance();
}


void VariantGraphVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:variantdb.VariantGraphVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_info_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariantGraphVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 vertex_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // uint64 offset = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // uint32 length = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_s_info(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 34) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariantGraphVertex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:variantdb.VariantGraphVertex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vertex_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertex_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_s_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:variantdb.VariantGraphVertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:variantdb.VariantGraphVertex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariantGraphVertex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:variantdb.VariantGraphVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertex_id = 1;
  if (this->vertex_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->vertex_id(), output);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // uint32 length = 3;
  if (this->length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->s_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->s_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:variantdb.VariantGraphVertex)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantGraphVertex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:variantdb.VariantGraphVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertex_id = 1;
  if (this->vertex_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->vertex_id(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // uint32 length = 3;
  if (this->length() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->s_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->s_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:variantdb.VariantGraphVertex)
  return target;
}

size_t VariantGraphVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:variantdb.VariantGraphVertex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .variantdb.VariantGraphVertex.sample_info s_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->s_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->s_info(static_cast<int>(i)));
    }
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // uint32 vertex_id = 1;
  if (this->vertex_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->vertex_id());
  }

  // uint32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantGraphVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:variantdb.VariantGraphVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantGraphVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantGraphVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:variantdb.VariantGraphVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:variantdb.VariantGraphVertex)
    MergeFrom(*source);
  }
}

void VariantGraphVertex::MergeFrom(const VariantGraphVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:variantdb.VariantGraphVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_info_.MergeFrom(from.s_info_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.vertex_id() != 0) {
    set_vertex_id(from.vertex_id());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void VariantGraphVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:variantdb.VariantGraphVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantGraphVertex::CopyFrom(const VariantGraphVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:variantdb.VariantGraphVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantGraphVertex::IsInitialized() const {
  return true;
}

void VariantGraphVertex::Swap(VariantGraphVertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariantGraphVertex::InternalSwap(VariantGraphVertex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&s_info_)->InternalSwap(CastToBase(&other->s_info_));
  swap(offset_, other->offset_);
  swap(vertex_id_, other->vertex_id_);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantGraphVertex::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_include_2fvariantgraphvertex_2eproto);
  return ::file_level_metadata_include_2fvariantgraphvertex_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VariantGraphVertexList::InitAsDefaultInstance() {
}
class VariantGraphVertexList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantGraphVertexList::kVertexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantGraphVertexList::VariantGraphVertexList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:variantdb.VariantGraphVertexList)
}
VariantGraphVertexList::VariantGraphVertexList(const VariantGraphVertexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertex_(from.vertex_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:variantdb.VariantGraphVertexList)
}

void VariantGraphVertexList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_VariantGraphVertexList_include_2fvariantgraphvertex_2eproto.base);
}

VariantGraphVertexList::~VariantGraphVertexList() {
  // @@protoc_insertion_point(destructor:variantdb.VariantGraphVertexList)
  SharedDtor();
}

void VariantGraphVertexList::SharedDtor() {
}

void VariantGraphVertexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantGraphVertexList& VariantGraphVertexList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantGraphVertexList_include_2fvariantgraphvertex_2eproto.base);
  return *internal_default_instance();
}


void VariantGraphVertexList::Clear() {
// @@protoc_insertion_point(message_clear_start:variantdb.VariantGraphVertexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariantGraphVertexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .variantdb.VariantGraphVertex vertex = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_vertex(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariantGraphVertexList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:variantdb.VariantGraphVertexList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .variantdb.VariantGraphVertex vertex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:variantdb.VariantGraphVertexList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:variantdb.VariantGraphVertexList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariantGraphVertexList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:variantdb.VariantGraphVertexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .variantdb.VariantGraphVertex vertex = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertex_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vertex(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:variantdb.VariantGraphVertexList)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantGraphVertexList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:variantdb.VariantGraphVertexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .variantdb.VariantGraphVertex vertex = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertex_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vertex(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:variantdb.VariantGraphVertexList)
  return target;
}

size_t VariantGraphVertexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:variantdb.VariantGraphVertexList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .variantdb.VariantGraphVertex vertex = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vertex_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vertex(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantGraphVertexList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:variantdb.VariantGraphVertexList)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantGraphVertexList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantGraphVertexList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:variantdb.VariantGraphVertexList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:variantdb.VariantGraphVertexList)
    MergeFrom(*source);
  }
}

void VariantGraphVertexList::MergeFrom(const VariantGraphVertexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:variantdb.VariantGraphVertexList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_.MergeFrom(from.vertex_);
}

void VariantGraphVertexList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:variantdb.VariantGraphVertexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantGraphVertexList::CopyFrom(const VariantGraphVertexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:variantdb.VariantGraphVertexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantGraphVertexList::IsInitialized() const {
  return true;
}

void VariantGraphVertexList::Swap(VariantGraphVertexList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariantGraphVertexList::InternalSwap(VariantGraphVertexList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vertex_)->InternalSwap(CastToBase(&other->vertex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantGraphVertexList::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_include_2fvariantgraphvertex_2eproto);
  return ::file_level_metadata_include_2fvariantgraphvertex_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace variantdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::variantdb::VariantGraphVertex_sample_info* Arena::CreateMaybeMessage< ::variantdb::VariantGraphVertex_sample_info >(Arena* arena) {
  return Arena::CreateInternal< ::variantdb::VariantGraphVertex_sample_info >(arena);
}
template<> PROTOBUF_NOINLINE ::variantdb::VariantGraphVertex* Arena::CreateMaybeMessage< ::variantdb::VariantGraphVertex >(Arena* arena) {
  return Arena::CreateInternal< ::variantdb::VariantGraphVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::variantdb::VariantGraphVertexList* Arena::CreateMaybeMessage< ::variantdb::VariantGraphVertexList >(Arena* arena) {
  return Arena::CreateInternal< ::variantdb::VariantGraphVertexList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
